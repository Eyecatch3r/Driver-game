#BlueJ class context
comment0.target=Akteur
comment0.text=\r\n\ Ein\ Objekt\ der\ Klasse\ Akteur\ existiert\ in\ einem\ Objekt\ der\ Klasse\ Welt.\ Die\ agiere-Methode\ wird\ in\ einer\ Schleife\ aufgerufen.\r\n
comment1.params=pWelt\ pX\ pY\ pRichtung\ pDrehGeschwindigkeit\ pBewegungsGeschwindigkeit\ pBild\ pKantenverhalten
comment1.target=Akteur(Welt,\ double,\ double,\ double,\ double,\ double,\ Bild,\ Akteur.Kantenverhalten)
comment1.text=\r\n\ Konstruktor\ der\ Klasse\ Akteur\r\n\ \r\n\ @param\ pWelt\ Welt-Objekt,\ in\ dem\ der\ Akteur\ existiert\r\n\ @param\ pX\ x-Koordinate\ des\ Akteurs\ in\ der\ Welt\r\n\ @param\ pY\ y-Koordinate\ des\ Akteurs\ in\ der\ Welt\r\n\ @param\ pRichtung\ Blickrichtung\ des\ Akteurs\ in\ der\ Welt\r\n\ @param\ pDrehGeschwindigkeit\ Drehgeschwindigkeit\ des\ Akteurs\ in\ der\ Welt\r\n\ @param\ pBewegungsGeschwindigkeit\ Bewegungsgeschwindigkeit\ des\ Akteurs\ in\ der\ Welt\r\n\ @param\ pPfadZumBild\ Pfad\ zur\ Bilddatei\ des\ Akteurs\r\n\ @param\ Kantenverhalten\ Kantenverhalten\ des\ Akteurs\ (EBENE,\ FLAECHE,\ KUGEL)\r\n
comment10.params=
comment10.target=java.awt.Shape\ gibForm()
comment10.text=\r\n\ Liefert\ die\ Form\ des\ Akteur-Objektes.\r\n
comment11.params=
comment11.target=boolean\ gibZeichneForm()
comment11.text=\r\n\ Liefert\ true,\ wenn\ die\ Form\ des\ Akteurs\ zusaetzlich\ zum\ Bild\ des\ Akteurs\ gezeichnet\ werden\ soll,\ sonst\ false.\r\n\ \r\n\ @return\ true,\ wenn\ die\ Form\ des\ Akteurs\ zusaetzlich\ zum\ Bild\ des\ Akteurs\ gezeichnet\ werden\ soll,\ sonst\ false\r\n
comment12.params=pZeichneForm
comment12.target=void\ setzeZeichneForm(boolean)
comment12.text=\r\n\ Bestimmt,\ ob\ die\ Form\ des\ Akteurs\ zusaetzlich\ zum\ Bild\ des\ Akteurs\ gezeichnet\ werden\ soll.\r\n
comment13.params=
comment13.target=boolean\ gibFuelleForm()
comment13.text=\r\n\ Liefert\ true,\ wenn\ die\ Form\ des\ Akteurs\ ausgeuellt\ gezeichnet\ werden\ soll,\ sonst\ false.\r\n\ \r\n\ @return\ true,\ wenn\ die\ Form\ des\ Akteurs\ ausgefuelltgezeichnet\ werden\ soll,\ sonst\ false\r\n
comment14.params=pFuelleForm
comment14.target=void\ setzeFuelleForm(boolean)
comment14.text=\r\n\ Bestimmt,\ ob\ die\ Form\ des\ Akteurs\ ausgefuellt\ gezeichnet\ werden\ soll.\r\n
comment15.params=
comment15.target=java.awt.Shape\ gibTransformierteForm()
comment15.text=\r\n\ Liefert\ die\ Form\ des\ Akteurs\ nach\ der\ Transformation,\ die\ sich\ durch\ Translation\ an\ die\ aktuelle\ Position\ und\ Rotation\ in\ die\ aktuelle\ Blickrichtung\ ergibt.\r\n\ \r\n\ @return\ transformierte\ Form\ des\ Akteurs\r\n
comment16.params=
comment16.target=double\ gibDrehGeschwindigkeit()
comment16.text=\r\n\ Liefert\ die\ Drehgeschwindigkeit\ des\ Akteurs.\r\n\ \r\n\ @return\ Dregeschwindigkeit\ des\ Akteurs\r\n
comment17.params=pDrehGeschwindigkeit
comment17.target=void\ setzeDrehGeschwindigkeit(double)
comment17.text=\r\n\ Setzt\ die\ Drehgeschwindigkeit\ des\ Akteurs.\r\n\ \r\n\ @param\ pDrehGeschwindigkeit\ Drehgeschwindigkeit\ des\ Akteurs\r\n
comment18.params=
comment18.target=double\ gibBewegungsGeschwindigkeit()
comment18.text=\r\n\ Liefert\ die\ Bewegungsgeschwindigkeit\ des\ Akteurs.\r\n\ \r\n\ @return\ Bewegungsgeschwindigkeit\ des\ Akteurs\r\n
comment19.params=pBewegungsGeschwindigkeit
comment19.target=void\ setzeBewegungsGeschwindigkeit(double)
comment19.text=\r\n\ Setzt\ die\ Bewegungsgeschwindigkeit\ des\ Akteurs.\r\n\ \r\n\ @param\ pBewegungsgeschwindigkeit\ Bewegungsgeschwindigkeit\ des\ Akteurs\r\n
comment2.params=pWelt\ pX\ pY\ pBild\ pKantenverhalten\ pLane
comment2.target=Akteur(Welt,\ double,\ double,\ Bild,\ Akteur.Kantenverhalten,\ int)
comment20.params=
comment20.target=double\ gibX()
comment20.text=\r\n\ Liefert\ die\ x-Koordinate\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @return\ x-Koordinate\ des\ Ateurs\ in\ der\ Welt\r\n
comment21.params=pX
comment21.target=void\ setzeX(double)
comment21.text=\r\n\ Setzt\ die\ x-Koordinate\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @param\ pX\ x-Koordinate\ des\ Akteurs\ in\ der\ Welt\r\n
comment22.params=
comment22.target=double\ gibY()
comment22.text=\r\n\ Liefert\ die\ y-Koordinate\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @return\ y-Koordinate\ des\ Ateurs\ in\ der\ Welt\r\n
comment23.params=pY
comment23.target=void\ setzeY(double)
comment23.text=\r\n\ Setzt\ die\ y-Koordinate\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @param\ pY\ y-Koordinate\ des\ Akteurs\ in\ der\ Welt\r\n
comment24.params=
comment24.target=double\ gibRichtung()
comment24.text=\r\n\ Liefert\ die\ Richtung\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @return\ Richtung\ des\ Akteurs\ in\ der\ Welt\r\n
comment25.params=pRichtung
comment25.target=void\ setzeRichtung(double)
comment25.text=\r\n\ Setzt\ die\ Richtung\ des\ Akteurs\ in\ der\ Welt.\r\n\ \r\n\ @param\ pRichtung\ Richtung\ des\ Akteurs\ in\ der\ Welt\r\n
comment26.params=pAndererAkteur
comment26.target=double\ gibDistanz(Akteur)
comment26.text=\r\n\ Liefert\ die\ Distanz\ des\ Akteurs\ zu\ einem\ anderen\ Akteur\r\n\ \r\n\ @param\ pAndererAkteur\ Anderer\ Akteur,\ zu\ dem\ der\ Abstand\ bestimmt\ wird\r\n\ \r\n\ @return\ Distanz\ des\ AKteurs\ zu\ einem\ anderen\ Akteur\r\n
comment27.params=
comment27.target=double\ gibUmkreisradius()
comment27.text=\r\n\ Liefert\ den\ Umkreisradius\ um\ die\ Grafik\ des\ Akteurs\r\n\ \r\n\ @return\ Umkreisradius\ um\ die\ Grafik\ des\ Akteurs\r\n
comment28.params=
comment28.target=boolean\ istAusserhalbDerWelt()
comment28.text=\r\n\ Liefert\ true,\ wenn\ der\ Akteur\ ausserhalb\ des\ sichtbaren\ Bereichs\ der\ Welt\ liegt,\ sonst\ false.\r\n\ \r\n\ @return\ true,\ wenn\ der\ Akteur\ ausserhalb\ des\ sichtbaren\ Bereichs\ der\ Welt\ liegt,\ sonst\ false\r\n
comment29.params=pAndererAkteur
comment29.target=boolean\ kollidiert(Akteur)
comment29.text=\r\n\ Liefert\ true,\ wenn\ der\ Akteur\ mit\ einem\ anderen\ Akteur\ kollidiert,\ sonst\ false.\r\n\ \r\n\ @return\ true,\ wenn\ der\ Akteur\ mit\ einem\ anderen\ Akteur\ kollidiert,\ sonst\ false\r\n
comment3.params=pWelt\ pX\ pY\ pBild
comment3.target=Akteur(Welt,\ double,\ double,\ Bild)
comment30.params=pVarargsKlassen
comment30.target=abiturklassen.datenstrukturklassen.linear.List\ gibKollidierendeObjekte(java.lang.Class[])
comment30.text=\r\n\ Liefert\ eine\ Liste\ (Kopie)\ der\ Akteure\ in\ der\ Welt,\ mit\ denen\ der\ Aktuer\ kollidiert,\ ggf.\ gefiltert\ nach\ Klassen.\r\n\ \r\n\ @param\ Klassen,\ nach\ denen\ gefiltert\ wird\r\n\ \r\n\ @return\ Liste\ (Kopie)\ der\ Akteure\ in\ der\ Welt,\ mit\ denen\ der\ Aktuer\ kollidiert,\ ggf.\ gefiltert\ nach\ Klassen\r\n
comment31.params=pDistanz
comment31.target=void\ vorwaerts(double)
comment31.text=\r\n\ Bewirkt,\ dass\ sich\ der\ Akteur\ in\ die\ Blickrichtung\ bewegt.\r\n\ \r\n\ @param\ pDistanz\ Distanz,\ um\ die\ der\ Akteur\ bewegt\ wird\r\n
comment32.params=pWinkel
comment32.target=void\ rotiere(double)
comment32.text=\r\n\ Bewirkt,\ dass\ sich\ der\ Akteur\ um\ den\ angegebenen\ Winkel\ dreht.\r\n\ \r\n\ @param\ pWinkel\ Winkel,\ um\ den\ der\ Akteur\ gedreht\ wird\r\n
comment33.params=pKantenverhalten
comment33.target=void\ setzeKantenverhalten(Akteur.Kantenverhalten)
comment33.text=\r\n\ Setzt\ das\ Kantenverhalten\ auf\ EBENE,\ FLAECHE\ bzw.\ KUGEL\r\n\ \r\n\ @param\ pKantenverhalten\ EBENE,\ FLAECHE\ oder\ KUGEL\r\n
comment34.params=
comment34.target=Akteur.Kantenverhalten\ gibKantenverhalten()
comment34.text=\r\n\ Liefert\ das\ Kantenverhalten\ des\ Akteurs\r\n\ \r\n\ @return\ Kantenverhalten\ (EBENE,\ FLAECHE,\ KUGEL)\r\n
comment35.params=
comment35.target=int\ gibZeichenEbene()
comment35.text=\r\n\ Liefert\ die\ Zeichenebene\ f\u00FCr\ diesen\ Akteur.\r\n\ \r\n\ @return\ Zeichenebene\ f\u00FCr\ diesen\ Akteur\r\n
comment36.params=pZeichenEbene
comment36.target=void\ setzeZeichenEbene(int)
comment36.text=\r\n\ Setzt\ die\ Zeichenebene\ f\u00FCr\ diesen\ Akteur.\r\n\ \r\n\ @param\ pZeichenEbene\ Zeichenebene\ f\u00FCr\ diesen\ Akteur\r\n
comment37.params=g2d
comment37.target=void\ zeichneAkteur(java.awt.Graphics2D)
comment37.text=\r\n\ Zeichnet\ den\ Akteur.\r\n\ \r\n\ @param\ g2d\ Leinwand,\ auf\ die\ gezeichnet\ wird\r\n
comment38.params=g2d
comment38.target=void\ paint(java.awt.Graphics2D)
comment38.text=\r\n\ Der\ Akteur\ wird\ gezeichnet.\r\n\ \r\n\ @param\ g2d\ Leinwand,\ auf\ die\ gezeichnet\ wird\r\n
comment39.params=
comment39.target=java.awt.geom.AffineTransform\ gibAffineTransformation()
comment39.text=\r\n\ Liefert\ ein\ AffineTransform-Objekt,\ das\ zur\ Zeichnung\ des\ Akteurs\ (an\ der\ Position,\ mit\ der\ Blickrichtung)\ dient.\r\n\ \r\n\ @return\ AffineTransform-Objekt,\ das\ zur\ Zeichnung\ des\ Akteurs\ (an\ der\ Position,\ mit\ der\ Blickrichtung)\ dient\r\n
comment4.params=pWelt\ pX\ pY\ pBild\ pKantenverhalten
comment4.target=Akteur(Welt,\ double,\ double,\ Bild,\ Akteur.Kantenverhalten)
comment5.params=
comment5.target=void\ agiere()
comment5.text=\r\n\ Die\ Methode\ wird\ in\ einer\ Schleife\ aufgerufen.\ Hier\ wird\ das\ Verhalten\ des\ AKteurs\ bei\ einem\ Handlungsschritt\ festgelegt.\r\n
comment6.params=
comment6.target=Welt\ gibWelt()
comment6.text=\r\n\ Liefert\ das\ Welt-Objekt,\ in\ dem\ der\ Akteur\ existiert.\r\n\ \r\n\ @return\ Welt-Objekt,\ in\ dem\ der\ Akteur\ existiert\r\n
comment7.params=pPfadZurDatei
comment7.target=void\ setzeBild(java.lang.String)
comment7.text=\r\n\ Setzt\ das\ Bild\ des\ Akteurs.\r\n\ \r\n\ @param\ pPfadZurDatei\ Pfad\ zur\ Datei\ des\ Bildes\r\n
comment8.params=
comment8.target=Bild\ gibBild()
comment8.text=\r\n\ Liefert\ das\ Bild\ des\ Akteurs.\r\n\ \r\n\ @return\ Bild\ des\ Akteurs\r\n
comment9.params=pForm
comment9.target=void\ setzeForm(java.awt.Shape)
comment9.text=\r\n\ Setzt\ die\ Form\ des\ Akteur-Objekte.\ Standardmaessig\ ergibt\ sich\ die\ Form\ aus\ den\ Massen\ des\ Bildes,\ jedoch\ kann\ man\ die\ Form\ auch\ genauer\ eingrenzen.\r\n\ \r\n\ @param\ pForm\ Form\ des\ Akteurs\r\n
numComments=40
