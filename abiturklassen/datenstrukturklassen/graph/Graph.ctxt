#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ <p>\r\n\ Materialien\ zu\ den\ zentralen\ NRW-Abiturpruefungen\ im\ Fach\ Informatik\ ab\ 2018\r\n\ </p>\r\n\ <p>\r\n\ Klasse\ Graph\r\n\ </p>\r\n\ <p>\r\n\ Die\ Klasse\ Graph\ stellt\ einen\ ungerichteten,\ kantengewichteten\ Graphen\ dar.\ Es\ koennen\ \r\n\ Knoten-\ und\ Kantenobjekte\ hinzugefuegt\ und\ entfernt,\ flache\ Kopien\ der\ Knoten-\ und\ Kantenlisten\ \r\n\ des\ Graphen\ angefragt\ und\ Markierungen\ von\ Knoten\ und\ Kanten\ gesetzt\ und\ ueberprueft\ werden.\r\n\ Des\ Weiteren\ kann\ eine\ Liste\ der\ Nachbarn\ eines\ bestimmten\ Knoten,\ eine\ Liste\ der\ inzidenten\ \r\n\ Kanten\ eines\ bestimmten\ Knoten\ und\ die\ Kante\ von\ einem\ bestimmten\ Knoten\ zu\ einem\ \r\n\ anderen\ bestimmten\ Knoten\ angefragt\ werden.\ Abgesehen\ davon\ kann\ abgefragt\ werden,\ welches\ \r\n\ Knotenobjekt\ zu\ einer\ bestimmten\ ID\ gehoert\ und\ ob\ der\ Graph\ leer\ ist.\r\n\ </p>\r\n\ \r\n\ @author\ Qualitaets-\ und\ UnterstuetzungsAgentur\ -\ Landesinstitut\ fuer\ Schule\r\n\ @version\ Oktober\ 2015\r\n
comment1.params=
comment1.target=Graph()
comment1.text=\r\n\ Ein\ Objekt\ vom\ Typ\ Graph\ wird\ erstellt.\ Der\ von\ diesem\ Objekt\ \r\n\ repraesentierte\ Graph\ ist\ leer.\r\n
comment10.params=pMark
comment10.target=void\ setAllEdgeMarks(boolean)
comment10.text=\r\n\ Der\ Auftrag\ setzt\ die\ Markierungen\ aller\ Kanten\ des\ Graphen\ auf\ pMark.\r\n
comment11.params=
comment11.target=boolean\ allVerticesMarked()
comment11.text=\r\n\ Die\ Anfrage\ liefert\ true,\ wenn\ alle\ Knoten\ des\ Graphen\ mit\ true\ markiert\ sind,\ ansonsten\ false.\r\n
comment12.params=
comment12.target=boolean\ allEdgesMarked()
comment12.text=\r\n\ Die\ Anfrage\ liefert\ true,\ wenn\ alle\ Kanten\ des\ Graphen\ mit\ true\ markiert\ sind,\ ansonsten\ false.\r\n
comment13.params=pVertex
comment13.target=abiturklassen.datenstrukturklassen.linear.List\ getNeighbours(Vertex)
comment13.text=\r\n\ Die\ Anfrage\ liefert\ alle\ Nachbarn\ des\ Knotens\ pVertex\ als\ neue\ Liste\ vom\ Typ\ List<Vertex>.\ Hat\ der\ Knoten\r\n\ pVertex\ keine\ Nachbarn\ in\ diesem\ Graphen\ oder\ ist\ gar\ nicht\ in\ diesem\ Graphen\ enthalten,\ so\ \r\n\ wird\ eine\ leere\ Liste\ zurueckgeliefert.\r\n
comment14.params=pVertex
comment14.target=abiturklassen.datenstrukturklassen.linear.List\ getEdges(Vertex)
comment14.text=\r\n\ Die\ Anfrage\ liefert\ eine\ neue\ Liste\ alle\ inzidenten\ Kanten\ zum\ Knoten\ pVertex.\ Hat\ der\ Knoten\r\n\ pVertex\ keine\ inzidenten\ Kanten\ in\ diesem\ Graphen\ oder\ ist\ gar\ nicht\ in\ diesem\ Graphen\ enthalten,\ so\ \r\n\ wird\ eine\ leere\ Liste\ zurueckgeliefert.\r\n
comment15.params=pVertex\ pAnotherVertex
comment15.target=Edge\ getEdge(Vertex,\ Vertex)
comment15.text=\r\n\ Die\ Anfrage\ liefert\ die\ Kante,\ welche\ die\ Knoten\ pVertex\ und\ pAnotherVertex\ verbindet,\ \r\n\ als\ Objekt\ vom\ Typ\ Edge.\ Ist\ der\ Knoten\ pVertex\ oder\ der\ Knoten\ pAnotherVertex\ nicht\ \r\n\ im\ Graphen\ enthalten\ oder\ gibt\ es\ keine\ Kante,\ die\ beide\ Knoten\ verbindet,\ so\ wird\ null\ \r\n\ zurueckgeliefert.\r\n
comment16.params=
comment16.target=boolean\ isEmpty()
comment16.text=\r\n\ Die\ Anfrage\ liefert\ true,\ wenn\ der\ Graph\ keine\ Knoten\ enthaelt,\ ansonsten\ false.\r\n
comment2.params=
comment2.target=abiturklassen.datenstrukturklassen.linear.List\ getVertices()
comment2.text=\r\n\ Die\ Anfrage\ liefert\ eine\ neue\ Liste\ aller\ Knotenobjekte\ vom\ Typ\ List<Vertex>.\r\n
comment3.params=
comment3.target=abiturklassen.datenstrukturklassen.linear.List\ getEdges()
comment3.text=\r\n\ Die\ Anfrage\ liefert\ eine\ neue\ Liste\ aller\ Kantenobjekte\ vom\ Typ\ List<Edge>.\r\n
comment4.params=pID
comment4.target=Vertex\ getVertex(java.lang.String)
comment4.text=\r\n\ Die\ Anfrage\ liefert\ das\ Knotenobjekt\ mit\ pID\ als\ ID.\ Ist\ ein\ solchen\ Knotenobjekt\ nicht\ im\ Graphen\ enthalten,\r\n\ wird\ null\ zurueckgeliefert.\r\n
comment5.params=pVertex
comment5.target=void\ addVertex(Vertex)
comment5.text=\r\n\ Der\ Auftrag\ fuegt\ den\ Knoten\ pVertex\ in\ den\ Graphen\ ein,\ sofern\ es\ noch\ keinen\r\n\ Knoten\ mit\ demselben\ ID-Eintrag\ wie\ pVertex\ im\ Graphen\ gibt\ und\ pVertex\ eine\ ID\ ungleich\ null\ hat.\ \r\n\ Ansonsten\ passiert\ nichts.\r\n
comment6.params=pEdge
comment6.target=void\ addEdge(Edge)
comment6.text=\r\n\ Der\ Auftrag\ fuegt\ die\ Kante\ pEdge\ in\ den\ Graphen\ ein,\ sofern\ beide\ durch\ die\ Kante\ verbundenen\ Knoten\r\n\ im\ Graphen\ enthalten\ sind,\ nicht\ identisch\ sind\ und\ noch\ keine\ Kante\ zwischen\ den\ Knoten\ existiert.\ Ansonsten\ passiert\ nichts.\r\n
comment7.params=pVertex
comment7.target=void\ removeVertex(Vertex)
comment7.text=\r\n\ Der\ Auftrag\ entfernt\ den\ Knoten\ pVertex\ aus\ dem\ Graphen\ und\ loescht\ alle\ Kanten,\ die\ mit\ ihm\ inzident\ sind.\r\n\ Ist\ der\ Knoten\ pVertex\ nicht\ im\ Graphen\ enthalten,\ passiert\ nichts.\r\n
comment8.params=pEdge
comment8.target=void\ removeEdge(Edge)
comment8.text=\r\n\ Der\ Auftrag\ entfernt\ die\ Kante\ pEdge\ aus\ dem\ Graphen.\ Ist\ die\ Kante\ pEdge\ nicht\ \r\n\ im\ Graphen\ enthalten,\ passiert\ nichts.\r\n
comment9.params=pMark
comment9.target=void\ setAllVertexMarks(boolean)
comment9.text=\r\n\ Der\ Auftrag\ setzt\ die\ Markierungen\ aller\ Knoten\ des\ Graphen\ auf\ pMark.\r\n
numComments=17
